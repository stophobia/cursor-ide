---
description: PRD 문서 생성 지시사항
globs: 
---
# 모두의커서 문서작성 지시사항

## 1. PRD 문서 파일

각 문서 파일은 목적과 용도가 다르므로 역할에 맞게 분리하여 관리합니다.

- **@PRD_project.md**
  - 프로젝트 전체 개요, 배경, 목적, 범위, 핵심 가치와 현재 구현 상태 등을 기술합니다.
  - 시스템 아키텍처, 기술 스택, 데이터베이스 모델, API 엔드포인트, 전체 프로세스 흐름 등을 포함합니다.

- **@PRD_project_folder.md**
  - 프로젝트의 디렉토리 및 파일 구조를 상세하게 설명합니다.
  - 각 폴더(예: app, domains, core, common, docs 등)의 역할과 CI/CD, Docker, 환경변수 관리 등 인프라 관련 정보를 명시합니다.

- **@PRD_git_branch.md**
  - Git 브랜치 전략 및 커밋 메시지 작성 규칙을 정의합니다.
  - 브랜치 유형(main, develop, feature, bugfix, release, hotfix)과 각 브랜치의 활용 방법, 커밋 메시지 형식을 상세히 기술합니다.

- **@PRD_<도메인명>.md (예: @PRD_saju.md, @PRD_accounts.md, @PRD_users.md, @PRD_manse.md)**
  - 각 도메인의 상세 요구사항, 데이터 모델, API 설계, 예외 처리, 비즈니스 로직 플로우, 테스트 전략 등을 문서화합니다.
  - 도메인 간 인터페이스, 상수와 타입, 공통 유틸리티 함수 사용 등 일관성을 유지할 수 있도록 명시합니다.

---

## 2. PRD 지시사항 생성 지침

AI가 PRD 문서 생성 시 참고할 수 있도록 아래와 같이 구체적인 지시사항을 작성합니다.

````markdown
# PRD 생성 지시사항

1. 프로젝트 개요 작성:
   - 프로젝트 배경, 목적, 범위, 핵심 가치 및 목표를 상세히 기술합니다.
   - 현재 구현된 시스템 상태(예: 사주 분석 고도화, 캐싱 시스템 등) 및 진행 중인 작업 내역을 포함합니다.
   - 참고 파일: @PRD_project.md

2. 전체 시스템 구조 및 아키텍처:
   - 시스템 아키텍처 다이어그램, 기술 스택(Python, FastAPI, PostgreSQL, Redis 등) 및 DB 모델 설정을 문서화합니다.
   - 아키텍처 구성, API 엔드포인트, 모듈 간 데이터 전달 플로우, 그리고 연동 방식에 대해 상세하게 작성합니다.
   - 참고 파일: @PRD_project.md

3. 디렉토리 및 파일 구조 설명:
   - 프로젝트 내 각 폴더(예: app, domains, core, common, docs 등)의 역할 및 하위 파일의 역할을 서술합니다.
   - CI/CD 설정, Docker 환경 구성, 환경 변수 관리 등 인프라 설정 내용도 명시합니다.
   - 참고 파일: @PRD_project_folder.md

4. Git 브랜치 전략 및 커밋 규칙:
   - main, develop, feature, bugfix, release, hotfix 브랜치 모델과 각 브랜치의 활용 방법을 상세히 설명합니다.
   - 커밋 메시지 작성 규칙(제목, 본문, 푸터 등) 및 자주 사용하는 동사(Add, Remove, Fix, Update, Implement, Refactor 등) 목록을 포함합니다.
   - 참고 파일: @PRD_git_branch.md

5. 도메인별 PRD 문서 작성:
   - 각 도메인(사주, 계정, 사용자, 만세력 등)에 대해 비즈니스 로직, 데이터 모델, 인터페이스 및 API 설계, 예외 처리와 로깅 정책을 명시합니다.
   - 도메인 간 데이터 전달 규칙, 상수 및 공통 타입 활용 방법, API 스펙 등을 포함합니다.
   - 파일 예시: @PRD_saju.md, @PRD_accounts.md, @PRD_users.md, @PRD_manse.md

6. 예외 처리 및 로깅 시스템:
   - 각 모듈에서 일관된 예외 처리 규칙(도메인 특화 예외 클래스, 사용자 친화적 에러 메시지, 내부 로깅 정보 기록)을 기술합니다.
   - 로깅 시스템 설정, 로그 파일 위치, 로깅 포맷 및 디버깅 정보 기록 기준을 상세히 서술합니다.
   - 참고 파일: @PRD_project.md (예외 처리 및 로깅 섹션)

7. 변경 이력 관리:
   - PRD 문서 변경 시점, 변경사항, Git 커밋 내역 및 관련 이슈 번호를 기록하는 변경 이력 섹션을 마련합니다.
   - 이력은 주기적으로 업데이트 하며, 문서의 버전 관리에 반영합니다.
   - 참고 파일: @PRD_project.md (변경 이력 섹션)

8. 문서 업데이트 및 상호 연동:
   - 코드 변경(특히 DB 스키마, API 변경)이 발생할 때마다 PRD 문서, Alembic 스크립트, 도메인별 PRD 문서를 동기화합니다.
   - 상수, 타입, 유틸리티 함수의 변경 사항을 반영하여 관련 문서 전체에 일관성을 유지합니다.
````

---

## 3. 추가 활용 가이드

추가 활용 가이드는 PRD 지시사항을 더욱 효과적으로 활용하기 위한 세부 지침을 포함합니다.

- **세부 문서 연동 관리:**
  - 각 PRD 문서 파일 간 상호 참조를 명시하고, 관련 문서(예: API 스펙, 데이터 모델, 기술 스펙 등)와의 연계를 유지합니다.
  - 변경 이력이 발생하면 관련 문서의 업데이트 요구사항을 자동화하거나 주기적으로 검토할 수 있도록 합니다.

- **모듈 간 일관성 확보:**
  - 도메인별 문서 작성 시 공통 상수, 타입 및 유틸리티 함수의 사용 규칙을 상세히 명시합니다.
  - 모듈 인터페이스 및 데이터 전달 규격(예: Pydantic 모델 스펙 등)을 문서화하여, 팀원들이 동일한 형식을 따르도록 합니다.

- **협업 및 리뷰 체계:**
  - 작성된 PRD 지시사항과 문서들을 팀원들과 공유하고, 코드 변경 시마다 반드시 문서 리뷰 및 업데이트를 진행하도록 합니다.
  - 각 도메인별 책임자가 문서의 정확성을 주기적으로 검증하는 프로세스를 마련합니다.

- **템플릿 및 자동화:**
  - 새로운 도메인 PRD 문서를 생성할 때 기본 템플릿을 제공하여, 빠르게 초기 문서를 작성할 수 있도록 합니다.
  - CI/CD 파이프라인에서 문서 변경 사항을 감지하여 관련 테스트 스크립트 혹은 알림 시스템을 구축, 업데이트 누락을 방지합니다.

- **교육 및 가이드라인 문서:**
  - 팀 내 교육 자료에 이 PRD 생성 지침과 파일 분리 기준, 협업 방법 등을 포함시켜 신규 입사자 및 팀원들이 동일한 기준을 이해할 수 있도록 합니다.
  - 주기적인 워크숍이나 코드 리뷰 세션을 통해 지침 준수 여부와 개선 사항을 논의합니다.

---

이와 같이 PRD 문서를 목적별로 분리하고, 각 파일 및 항목마다 세부 지시사항을 마련하면 AI를 비롯한 모든 개발 및 문서 관리 도구가 일관성 있고 효율적으로 작동할 수 있습니다. 이를 통해 프로젝트 전반의 품질과 유지보수성을 획기적으로 향상시킬 수 있습니다.
